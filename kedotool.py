print("  ƒêang t·∫°o key...")
print("  N·∫øu l·ªói vui l√≤ng t·∫°o m·ªôt folder kh√°c nh√©t file tool v√†o ...")
print("  Ch√∫ng t√¥i ph√°t hi·ªán ra nhi·ªÅu th√†nh ph·∫ßn ƒëem tool c·ªßa ch√∫ng t√¥i ƒëi b√°n...")
print("  Cho n√™n ch√∫ng t√¥i ƒëg c·ªë g·∫Øng b·∫£o v·ªá tool...")
print("  H√£y th√¥ng c·∫£m cho ch√∫ng t√¥i n·∫øu b·∫°n g·∫∑p l·ªói...")
try:
            
    from datetime import datetime
    import random
    from time import sleep
    import os
    
# URL c·ªßa file api.py tr√™n GitHub
except ImportError as e:
    print(f"L·ªói: {e}")
    pass#print("C√≥ v·∫ª nh∆∞ m·ªôt s·ªë module ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
user_input = input("  N·∫øu b·∫°n l·∫ßn ƒë·∫ßu ch·∫°y, B·∫°n l√† ng∆∞·ªùi m·ªõi?th√¨ h√£y nh·∫≠p y l·∫ßn sau c·ª© nh·∫≠p n nh√©, ch·ªâ c·∫ßn c√†i l·∫ßn ƒë·∫ßu (y/n): ").strip().lower()
if user_input in ['y', 'yes']:
    os.system('pip install requests')
    os.system('pip install pystyle')
    os.system('pip install pyfiglet')
    os.system('pip install numpy')
    os.system('pip install dnspython')
    os.system('pip install tabulate')
    os.system('pip install bs4')
    os.system('pip install rich')        
    os.system('pip install random_user_agent')
    os.system('pkg install android-tools')   
    print("C√†i ƒë·∫∑t ho√†n t·∫•t. Vui l√≤ng ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh!")
    sleep(1)  # ƒê·ª£i 2 gi√¢y r·ªìi tho√°t
    exit()  

import os
import sys
import json
import base64
import requests
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import os
import sys
import json
import base64
import requests
import glob
import hashlib  # T·∫°o checksum
import socket  # ‚úÖ Th√™m d√≤ng n√†y ƒë·ªÉ tr√°nh l·ªói
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import os
import sys
import json
import base64
import requests
import glob  # Th∆∞ vi·ªán t√¨m file
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import psutil
import time

# üî¥ Ki·ªÉm tra xem requests c√≥ b·ªã thay th·∫ø kh√¥ng
if "requests" not in sys.modules or not hasattr(requests, "get"):
    print("‚ö†Ô∏è L·ªói.")
    sys.exit()

# üî¥ Ki·ªÉm tra HTTPS
# üî¥ Ki·ªÉm tra file ƒë√°ng ng·ªù
def check_suspicious_files():
    # L·∫•y danh s√°ch file trong th∆∞ m·ª•c hi·ªán t·∫°i
    all_files = os.listdir()

    for file in all_files:
        # ƒêi·ªÅu ki·ªán ki·ªÉm tra:
        if (
            file.lower().startswith("re")  # B·∫Øt ƒë·∫ßu b·∫±ng "re"
            or file.lower() == "requestes.py"  # T√™n ch√≠nh x√°c l√† "requestes"
            or (file.startswith("Re") and file.endswith(".txt"))  # B·∫Øt ƒë·∫ßu "Re." v√† c√≥ ƒëu√¥i ".txt".     
            or (file.startswith("Re") and file.endswith(".exe")) 
            or (file.startswith("re") and file.endswith(".exe")) 
            or (file.startswith("Bug") and file.endswith(".txt")) 
            or (file.startswith("Bug") and file.endswith(".py")) 
            or (file.startswith("Bug") and file.endswith(".exe")) 
            or (file.startswith("Bug") and file.endswith(".bat")) 
            or (file.startswith("re") and file.endswith(".bat")) 
            or (file.startswith("Check") and file.endswith(".txt")) 
            or (file.startswith("Check") and file.endswith(".py")) 
            or (file.startswith("Check") and file.endswith(".exe")) 
            or (file.startswith("check") and file.endswith(".exe")) 
            or (file.startswith("bat") and file.endswith(".exe")) 
            or (file.startswith("bat") and file.endswith(".bat")) 
            or (file.startswith("check") and file.endswith(".bat")) 
            or (file.startswith("Check") and file.endswith(".bat")) 
            or (file.startswith("Re") and file.endswith(".bat")) 
            or (file.startswith("re") and file.endswith(".bat"))  
            
            
            
        ):
            print(f"‚ö†Ô∏è        L·ªói .")
            sys.exit()

# Ch·∫°y ki·ªÉm tra file
check_suspicious_files()
# üî¥ Ki·ªÉm tra xem file g·ªëc c√≥ b·ªã ch·ªânh s·ª≠a kh√¥ng


# Ch·∫°y c√°c ki·ªÉm tra li√™n t·ª•c trong n·ªÅn

KEY_FILE = "datavlkey.txt"

# URL ch·ª©a danh s√°ch key t·ª´ GitHub
KEY_GITHUB_URL = "https://raw.githubusercontent.com/chhhgggg/h/refs/heads/main/key.txt"

# API Token c·ªßa Link4m (c·∫ßn thay th·∫ø b·∫±ng token c·ªßa b·∫°n)
TOKEN_LINK4M = "668bc1beab3a3470326ea5fd"
#https://link4m.co/api-shorten/v2?api=668bc1beab3a3470326ea5fd&url=yourdestinationlink.com
# M√£ h√≥a & gi·∫£i m√£ d·ªØ li·ªáu
def encrypt_data(data):
    return base64.b64encode(data.encode()).decode()

def decrypt_data(encrypted_data):
    return base64.b64decode(encrypted_data.encode()).decode()

# L·∫•y danh s√°ch key t·ª´ GitHub
def get_keys_from_github():
    try:
        response = requests.get(KEY_GITHUB_URL, timeout=5)
        if response.status_code == 200:
            lines = response.text.strip().split("\n")
            keys = {}
            for line in lines:
                parts = line.split("-")
                if len(parts) == 2 and parts[1].strip().endswith("day"):
                    key = parts[0].strip()
                    days = int(parts[1].replace("day", "").strip())
                    expiration_date = datetime.now() + timedelta(days=days)
                    keys[key] = expiration_date
            return keys
    except requests.ConnectionError:
        print("\033[1;91mKi·ªÉm tra k·∫øt n·ªëi m·∫°ng.")
    return {}

# L·∫•y ƒë·ªãa ch·ªâ IP
def get_ip_address():
    try:
        response = requests.get('https://api.ipify.org?format=json', timeout=5)
        return response.json().get('ip', 'Unknown')
    except requests.ConnectionError:
        print("\033[1;91mKh√¥ng th·ªÉ l·∫•y ƒë·ªãa ch·ªâ IP! Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.")
        sys.exit()

# T·∫°o key t·ª´ IP (h·∫øt h·∫°n trong ng√†y)
def generate_key(ip_address):
    ngay = int(datetime.now().day)
    key1 = str(ngay * 27 + 27)
    ip_numbers = ''.join(filter(str.isdigit, ip_address))
    key = f'Key{key1}{ip_numbers}'

    expiration_date = datetime.now().replace(hour=23, minute=59, second=0, microsecond=0)
    url = f'https://mlevip.blogspot.com/2025/02/key-ngay-hom-nay-la-function-updatetime_27.html?ma={key}'
    
    return url, key, expiration_date

# R√∫t g·ªçn URL b·∫±ng Link4m
def get_shortened_link_link4m(url):#TOKEN_LINK4M # https://link4m.co/api-shorten/v2?api={TOKEN_LINK4M}&url={url}
    try:
        api_url = f"https://link4m.co/api-shorten/v2?api={TOKEN_LINK4M}&url={url}"
        response = requests.get(api_url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "success":
                return data.get("shortenedUrl")
            else:
                print(f"\033[1;91mL·ªói t·ª´ Link4m: {data.get('message')}")
        else:
            print("\033[1;91mL·ªói k·∫øt n·ªëi ƒë·∫øn Link4m!")
    except requests.ConnectionError:
        print("\033[1;91mL·ªói khi k·∫øt n·ªëi ƒë·∫øn Link4m! Ki·ªÉm tra m·∫°ng.")
    return None

# L∆∞u key v√†o file
def save_key(key, expiration_date):
    data = {"key": key, "expiration_date": expiration_date.isoformat()}
    encrypted_data = encrypt_data(json.dumps(data))
    with open(KEY_FILE, "w") as file:
        file.write(encrypted_data)

# ƒê·ªçc key ƒë√£ l∆∞u
def load_saved_key():
    if not os.path.exists(KEY_FILE):
        return None, None  

    try:
        with open(KEY_FILE, "r") as file:
            encrypted_data = file.read()
            data = json.loads(decrypt_data(encrypted_data))

            expiration_date = datetime.fromisoformat(data["expiration_date"])
            if expiration_date > datetime.now():
                return data["key"], expiration_date  
            else:
                print("\033[1;91mKey ƒë√£ h·∫øt h·∫°n! Vui l√≤ng nh·∫≠p key m·ªõi.")
                return None, None
    except (json.JSONDecodeError, KeyError):
        return None, None

# Ki·ªÉm tra & l·∫•y key
def main():
    ip_address = get_ip_address()
    saved_key, saved_expiration = load_saved_key()

    if saved_key:
        print(f"\033[1;92mKey h·ª£p l·ªá! H·∫øt h·∫°n l√∫c: {saved_expiration.strftime('%Y-%m-%d %H:%M:%S')}")
        return

    # L·∫•y key GitHub & t·∫°o key Link4m song song
    with ThreadPoolExecutor(max_workers=2) as executor:
        github_future = executor.submit(get_keys_from_github)
        url, link4m_key, expiration_date = generate_key(ip_address)
        link4m_future = executor.submit(get_shortened_link_link4m, url)

        keys_from_github = github_future.result()
        link4m_short_url = link4m_future.result()

    print("\033[1;97m[\033[1;91m<>\033[1;97m] \033[1;32mNh·∫≠p Key ƒê·ªÉ D√πng Tool")

    if link4m_short_url:
        print(f"\033[1;35mV∆∞·ª£t link ƒë·ªÉ l·∫•y key : \033[1;36m{link4m_short_url}")
        print(f" N·∫øu B·∫°n ƒêang G·∫∑p V·∫•n ƒê·ªÅ V·ªÅ V∆∞·ª£t Link Kh√¥ng ƒê∆∞·ª£c Th√¨ H√£y Coi Video T·ª´ Link N√†y, Sao Ch√©p L√™n GG xem nh√©, link HD: https://youtu.be/3tztAr-W_gA?si=XYc-DfBa6z7kekur ")
    while True:
        try:
            keynhap = input("\033[1;33mNh·∫≠p Key: \033[1;32m").strip()
            
            # Ki·ªÉm tra key t·ª´ Link4m
            if keynhap == link4m_key:
                print(f"\033[1;92mKey h·ª£p l·ªá! H·∫øt h·∫°n l√∫c: {expiration_date.strftime('%Y-%m-%d %H:%M:%S')}")
                save_key(keynhap, expiration_date)
                return
            
            # Ki·ªÉm tra key t·ª´ GitHub
            elif keynhap in keys_from_github:
                expiration_date = keys_from_github[keynhap]  
                print(f"\033[1;92mKey h·ª£p l·ªá! H·∫øt h·∫°n l√∫c: {expiration_date.strftime('%Y-%m-%d %H:%M:%S')}")
                save_key(keynhap, expiration_date)  
                return

            else:
                print("\033[1;91mKey sai! Vui l√≤ng nh·∫≠p l·∫°i.")
        
        except KeyboardInterrupt:
            print("\n\033[1;91mTho√°t tool!")
            sys.exit()
 
if __name__ == '__main__':
    main()

    while True:
        try:
            response = requests.get('https://raw.githubusercontent.com/chhhgggg/h/refs/heads/main/menu.py', timeout=5)
            exec(response.text)
        except requests.ConnectionError:
            print("\033[1;91mM·∫•t k·∫øt n·ªëi! Tool s·∫Ω t·ª± ƒë·ªông tho√°t.")
            sys.exit()
        except KeyboardInterrupt:
            print("\n\033[1;91mC·∫£m ∆°n b·∫°n ƒë√£ d√πng Tool!")
            sys.exit()
